#make_bin#

; BIN is plain binary format similar to .com format, but not limited to 1 segment;
; All values between # are directives, these values are saved into a separate .binf file.
; Before loading .bin file emulator reads .binf file with the same file name.

; All directives are optional, if you don't need them, delete them.

; set loading address, .bin file will be loaded to this address:
#LOAD_SEGMENT=0500h#
#LOAD_OFFSET=0000h#

; set entry point:
#CS=0500h#	; same as loading segment
#IP=0000h#	; same as loading offset

; set segment registers
#DS=0500h#	; same as loading segment
#ES=0500h#	; same as loading segment

; set stack
#SS=0500h#	; same as loading segment
#SP=FFFEh#	; set to top of loading segment

; set general registers (optional)
#AX=0000h#
#BX=0000h#
#CX=0000h#
#DX=0000h#
#SI=0000h#
#DI=0000h#
#BP=0000h#

; add your code here
     JMP  _CODE
	 DB   6 DUP(0)		;PADDING, TO SETUP INT 02H
	 DW   TESTINTR
	 DW	  0000
     TABLE_K    DB		0EEH,0EDH,0EBH,0E7H,
				DB		0DEH,0DDH,0DBH,0D7H,
				DB		0BEH,0BDH,0BBH,0B7H,
				DB		07EH,07DH,07BH,077H

	;7SEG DISPLAY TABLE NUMBERIC
	TABLE_D  	DB		3FH, 06H, 5BH, 4FH, 66H, 6DH
				DB		7DH, 27H, 7FH, 6FH, 77H, 7CH,
				DB		39H, 5EH, 79H, 71H
				;NON NUMERIC PART
				DB		40H			; '-'
	TABLE_D_R	EQU		16
	;PORT ADDRESSES FOR FIRST 8253A
	PORTA		EQU 	00H
	PORTB 		EQU 	02H
	PORTC 		EQU		04H
	CREG		EQU 	06H
	
	;PORT ADDRESSES FOR SECOND 8253A
	PORT2A		EQU		10H
	CREG2		EQU		16H
	
	;PORT ADDRESSES FOR 8253 TIMER
	TIMER1		EQU		08H
	TCREG		EQU 	0EH
	
	;OUTPUT BITS CORRESPONDING TO DIFFERENT FAN SPEEDS
	FS1			EQU		51*1
	FS2			EQU		51*2
	FS3			EQU		51*3
	FS4			EQU		51*4
	FS5			EQU		51*5
	
	;DELAY VARIABLES CORRESPONDING TO 1-9
	D1			EQU		10
	D2			EQU		20
	D3			EQU		30
	D4			EQU		40
	D5			EQU		50
	D6			EQU		60
	D7			EQU		70
	D8			EQU		80
	D9			EQU		90
	
	
	;STATE VARIABLES
	ON			DB		0
	AUTO		DB		0
	SPEED 		DB		0
	SETAUTOMODE DB 		0
	AUTOTIME	DB		0
	
_CODE: 	MOV AL, 10001000B
		OUT CREG, AL
		MOV AL, 10001011B
		OUT CREG2, AL
	;INITIALIZING PORT 8253A
		CALL INITLN
		
	;INITIALIZING INTERFACE
		
	
	;SEND 00H TO KEYPAD COLUMNS
A0: 	MOV     AL, 00H
		OUT		PORTC, AL
		
	;CHECK FOR ALL KEY RELEASE
A1: 	IN		AL, PORTC
		AND     AL, 0F0H
		CMP     AL, 0F0H    
		JNZ     A1
		CALL    DELAY20 	  
		
	;CHECK IF ANY KEYPRESSED	
		MOV     AL, 00H
		OUT     PORTC, AL
A2: 	IN      AL, PORTC
		AND     AL, 0F0H
		CMP     AL, 0F0H
		JZ      A2
		CALL    DELAY20 	
    
    ;DEBOUNCE KEYPRESS
		MOV     AL, 00H
		OUT     PORTC, AL
		IN      AL, PORTC
		AND     AL, 0F0H
		CMP     AL, 0F0H
		JZ      A2
    
    ;KEY PRESS COLUMN 1
		MOV     AL, 0EH
		MOV     BL, AL
		OUT     PORTC, AL
		IN      AL, PORTC
		AND     AL, 0F0H
		CMP     AL, 0F0H
		JNZ     A3
    
    ;PRESS COLUMN 2
		MOV     AL, 0DH
		MOV     BL, AL
		OUT     PORTC, AL
		IN      AL, PORTC
		AND     AL, 0F0H
		CMP     AL, 0F0H
		JNZ     A3
    
    ;KEY PRESS COLUMN 3
		MOV     AL, 0BH
		MOV     BL, AL
		OUT     PORTC, AL
		IN      AL, PORTC
		AND     AL, 0F0H
		CMP     AL, 0F0H
		JNZ     A3
    
    ;KEY PRESS COLUMN 4
		MOV     AL, 07H
		MOV     BL, AL
		OUT     PORTC, AL
		IN      AL, PORTC
		AND     AL, 0F0H
		CMP     AL, 0F0H
		JZ      A2
    
    ;DECODE KEY
A3: 	OR      AL, BL
		MOV     CX, 10H
		MOV     DI, 00H
		;MOV		BX, OFFSET TABLE_K     
		;MOV DI, DS:T_KBRD
	
A4: 	CMP     AL, [TABLE_K + DI]
		JZ      A5
		INC     DI
		LOOP    A4
    
    
A5: 	CMP DI, 0
		JZ X00
		CMP DI, 1
		JZ X01
		CMP DI, 2
		JZ X02
		CMP DI, 3
		JZ X03
		CMP DI, 4
		JZ X04
		CMP DI, 5
		JZ X05
		CMP DI, 6
		JZ X06
		CMP DI, 7
		JZ X07
		CMP DI, 8
		JZ X08
		CMP DI, 9
		JZ X09
		CMP DI, 10
		JZ X10
		CMP DI, 11
		JZ X11
		CMP DI, 12
		JZ X12
		CMP DI, 13
		JZ X13
		CMP DI, 14
		JZ X14
		CMP DI, 15
		JZ X15
		
		
X00:	CALL KEY00
		JMP REPL
X01:	CALL KEY01
		JMP REPL
X02:	CALL KEY02
		JMP REPL
X03:	CALL KEY03
		JMP REPL
X04:	CALL KEY04
		JMP REPL
X05:	CALL KEY05
		JMP REPL
X06:	CALL KEY06
		JMP REPL
X07:	CALL KEY07
		JMP REPL
X08:	CALL KEY08
		JMP REPL
X09:	CALL KEY09
		JMP REPL
X10: 	CALL KEY10
		JMP REPL
X11: 	CALL KEY11
		JMP REPL
X12: 	CALL KEY12
		JMP REPL
X13: 	CALL KEY13
		JMP REPL
X14: 	CALL KEY14
		JMP REPL
X15: 	CALL KEY15
		JMP REPL

	;REPL LOOP AGAIN
REPL:	JMP A0

	;CODE SHOULD NEVER REACH HERE
	;IN CASE IT DOES DO NOT ALLOW IT TO PROCEED FURTHER
_STOP: JMP _STOP
 



;DELAY OF 20MS
DELAY20 PROC NEAR
    MOV     CX, 2220
X9: LOOP    X9
    RET
DELAY20 ENDP

;EVENT HANDLERS FOR DIFFERENT DIFFERENT KEYPRESSES
;KEYPAD ASSUMED TO BE LAYED OUT LIKE
;	00	01	02	03
;	04	05	06	07
;	08	09	10	11
;	12	13	14	15

;'7'
KEY00 PROC NEAR
PUSH SI
CMP ON, 0
JZ KEY00_ALWAYS
CMP SETAUTOMODE, 1
JNZ KEY00_ALWAYS
MOV AUTOTIME, D7
MOV SI, 7
CALL DISPLAY2
KEY00_ALWAYS: POP SI
RET
KEY00 ENDP

;'8'
KEY01 PROC NEAR
PUSH SI
CMP ON, 0
JZ KEY01_ALWAYS
CMP SETAUTOMODE, 1
JNZ KEY01_ALWAYS
MOV AUTOTIME, D8
MOV SI, 8
CALL DISPLAY2
KEY01_ALWAYS: POP SI
RET
KEY01 ENDP

;'9'
KEY02 PROC NEAR
PUSH SI
CMP ON, 0
JZ KEY02_ALWAYS
CMP SETAUTOMODE, 1
JNZ KEY02_ALWAYS
MOV AUTOTIME, D9
MOV SI, 9
CALL DISPLAY2
KEY02_ALWAYS: POP SI
RET
KEY02 ENDP

KEY03 PROC NEAR
RET
KEY03 ENDP

;'4'
KEY04 PROC NEAR
PUSH SI
CMP ON, 0
JNZ KEY04_NOT_ON
MOV SPEED, 4
MOV SI, 4
CALL DISPLAY1
JMP KEY04_ALWAYS
KEY04_NOT_ON: CMP SETAUTOMODE, 1
JNZ KEY04_ALWAYS
MOV AUTOTIME, D4
MOV SI, 4
CALL DISPLAY2
KEY04_ALWAYS: POP SI
RET
KEY04 ENDP

;'5'
KEY05 PROC NEAR
PUSH SI
CMP ON, 0
JNZ KEY05_NOT_ON
MOV SPEED, 5
MOV SI, 5
CALL DISPLAY1
JMP KEY05_ALWAYS
KEY05_NOT_ON: CMP SETAUTOMODE, 1
JNZ KEY05_ALWAYS
MOV AUTOTIME, D5
MOV SI, 5
CALL DISPLAY2
KEY05_ALWAYS: POP SI
RET
KEY05 ENDP

;'6'
KEY06 PROC NEAR
PUSH SI
CMP ON, 0
JZ KEY06_ALWAYS
CMP SETAUTOMODE, 1
JNZ KEY06_ALWAYS
MOV AUTOTIME, D6
MOV SI, 6
CALL DISPLAY2
KEY06_ALWAYS: POP SI
RET
KEY06 ENDP

;'X'
KEY07 PROC NEAR
PUSH SI
CMP SETAUTOMODE, 2
JZ KEY07_ALWAYS
MOV SETAUTOMODE, 0
MOV SI, 16
CALL DISPLAY2
KEY07_ALWAYS: POP SI
RET
KEY07 ENDP

;'1'
KEY08 PROC NEAR
PUSH SI
CMP ON, 0
JNZ KEY08_NOT_ON
MOV SPEED, 1
MOV SI, 1
CALL DISPLAY1
JMP KEY08_ALWAYS
KEY08_NOT_ON: CMP SETAUTOMODE, 1
JNZ KEY08_ALWAYS
MOV AUTOTIME, D1
MOV SI, 1
CALL DISPLAY2
KEY08_ALWAYS: POP SI
RET
KEY08 ENDP

;'2'
KEY09 PROC NEAR
PUSH SI
CMP ON, 0
JNZ KEY09_NOT_ON
MOV SPEED, 2
MOV SI, 2
CALL DISPLAY1
JMP KEY09_ALWAYS
KEY09_NOT_ON: CMP SETAUTOMODE, 1
JNZ KEY09_ALWAYS
MOV AUTOTIME, D2
MOV SI, 2
CALL DISPLAY2
KEY09_ALWAYS: POP SI
RET
KEY09 ENDP

;'3'
KEY10 PROC NEAR
PUSH SI
CMP ON, 0
JNZ KEY10_NOT_ON
MOV SPEED, 3
MOV SI, 3
CALL DISPLAY1
JMP KEY10_ALWAYS
KEY10_NOT_ON: CMP SETAUTOMODE, 1
JNZ KEY04_ALWAYS
MOV AUTOTIME, D3
MOV SI, 3
CALL DISPLAY2
KEY10_ALWAYS: POP SI
RET
KEY10 ENDP

;'-'
KEY11 PROC NEAR
PUSH SI
PUSH DX
CMP SPEED, 1
JLE KEY11_ALWAYS
DEC SPEED
MOV DL, SPEED
MOV DH, 0
MOV SI, DX
CALL DISPLAY1
CALL SETSPEED
KEY11_ALWAYS: POP SI
POP DX
RET
KEY11 ENDP

;ON/OFF BUTTON
KEY12 PROC NEAR
CMP ON, 0
JZ KEY12_NOTON
CMP ON, 1
JZ KEY12_ON

KEY12_NOTON: CMP SPEED, 0
JZ KEY12_ALWAYS
MOV ON, 1
CALL SETSPEED
JMP KEY12_ALWAYS

KEY12_ON: MOV ON, 0
CALL INITLN
JMP KEY12_ALWAYS

KEY12_ALWAYS: RET
KEY12 ENDP

KEY13 PROC NEAR
RET
KEY13 ENDP

;'='
KEY14 PROC NEAR
PUSH SI
CMP ON, 0
JZ KEY14_ALWAYS
CMP SETAUTOMODE, 2
JZ KEY14_ALWAYS
CMP SETAUTOMODE, 0
JZ AUTO_AT_0
CMP SETAUTOMODE, 1
JZ AUTO_AT_1

AUTO_AT_0: MOV SETAUTOMODE, 1
MOV SI, 10
CALL DISPLAY2
JMP KEY14_ALWAYS

AUTO_AT_1: CMP AUTOTIME, 0
JLE KEY14_ALWAYS
MOV SETAUTOMODE, 2
CALL SETTIMER
JMP KEY14_ALWAYS

KEY14_ALWAYS: POP SI
RET
KEY14 ENDP

;'+'
KEY15 PROC NEAR
PUSH SI
PUSH DX
CMP SPEED, 5
JGE KEY15_ALWAYS
INC SPEED
MOV DL, SPEED
MOV DH, 0
MOV SI, DX
CALL DISPLAY1
CALL SETSPEED
KEY15_ALWAYS: POP SI
POP DX
RET
KEY15 ENDP

INITLN PROC NEAR
PUSH AX
PUSH SI
;INITIALISE ALL VARIABLES
MOV	ON, 0
MOV	AUTO, 0
MOV	SPEED, 0
MOV	SETAUTOMODE, 0
MOV	AUTOTIME, 0
;INITIALISE ALL 8255 PORTS

;OUTPUT 0 ON THE FAN CONTROL
MOV AL, 0
OUT PORT2A, AL
;SETUP THE CCREG IN THE 8253 TIMER SO THAT OUT GOES LOW
MOV AL, 00010000B
OUT TCREG, AL
;DISPLAY '-' ON BOTH OF THE DISPLAYS
MOV SI, 16
CALL DISPLAY1
CALL DISPLAY2
INITLN_ALWAYS: POP SI
POP AX
RET
INITLN ENDP

DISPLAY1 PROC NEAR
PUSH BX
PUSH AX
MOV BX, OFFSET TABLE_D
CMP SI, 0
JL	DISPLAY1_ALWAYS
CMP SI, TABLE_D_R
JG 	DISPLAY1_ALWAYS
MOV AL, [BX+SI]
OUT PORTA, AL
DISPLAY1_ALWAYS: POP BX
POP AX
RET
DISPLAY1 ENDP

DISPLAY2 PROC NEAR
PUSH BX
PUSH AX
MOV BX, OFFSET TABLE_D
CMP SI, 0
JL	DISPLAY2_ALWAYS
CMP SI, TABLE_D_R
JG 	DISPLAY2_ALWAYS
MOV AL, [BX+SI]
OUT PORTB, AL
DISPLAY2_ALWAYS: POP BX
POP AX
RET
DISPLAY2 ENDP

SETTIMER PROC NEAR
PUSH AX
;MOV AL, 00010000B
;OUT TCREG, AL
MOV AL, AUTOTIME
OUT TIMER1, AL
POP AX
RET
SETTIMER ENDP

;SETS THE SPEED OF THE FAN,
;ACCORDING TO THE VALUE IN THE SPEED VARIABLE
SETSPEED PROC NEAR
PUSH AX
CMP SPEED, 1
JZ SETSPEED_1
CMP SPEED, 2
JZ SETSPEED_2
CMP SPEED, 3
JZ SETSPEED_3
CMP SPEED, 4
JZ SETSPEED_4
CMP SPEED, 5
JZ SETSPEED_5
JMP SETSPEED_ALWAYS

SETSPEED_1: MOV AL, FS1
OUT PORT2A, AL
JMP SETSPEED_ALWAYS
SETSPEED_2: MOV AL, FS2
OUT PORT2A, AL
JMP SETSPEED_ALWAYS
SETSPEED_3: MOV AL, FS3
OUT PORT2A, AL
JMP SETSPEED_ALWAYS
SETSPEED_4: MOV AL, FS4
OUT PORT2A, AL
JMP SETSPEED_ALWAYS
SETSPEED_5: MOV AL, FS5
OUT PORT2A, AL
JMP SETSPEED_ALWAYS

SETSPEED_ALWAYS: POP AX
RET
SETSPEED ENDP

TESTINTR PROC NEAR
MOV ON, 0
CALL INITLN
TESTINTR_ALWAYS: IRET
TESTINTR ENDP

HLT           ; halt!


